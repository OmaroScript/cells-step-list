{
    "schema_version": "1.0.0",
    "mixins": [
        {
            "description": "# cells-amount-behavior\n\n![Certificated](https://img.shields.io/badge/certificated-yes-brightgreen.svg)\n![Polymer 2.x](https://img.shields.io/badge/Polymer-2.x-green.svg)\n\n[Demo of component in Cells Catalog](https://catalogs.platform.bbva.com/cells)\n\n`CellsBehaviors.AmountsBehavior` is a behavior to format amounts and currency codes\n\n> Note. Implemented in [`cells-atom-amount`](https://catalogs.platform.bbva.com/cells)\n\n```js\n  <script>\n    class XCellsAmountBehaviorTest extends CellsBehaviors.AmountBehavior(Polymer.Element) {\n      static get is() {\n        return 'x-cells-amount-behavior-test';\n      }\n\n      static get properties() {\n        return {};\n      }\n    }\n\n    customElements.define(XCellsAmountBehaviorTest.is, XCellsAmountBehaviorTest);\n  </script>\n```\n`cells-amount-behavior` provide public method getFormattedAmount to get a custom formatted amount from a string value",
            "summary": "Methods and constants to format monetary amounts.",
            "path": "cells-amount-behavior.js",
            "properties": [
                {
                    "name": "quantityFractional",
                    "type": "number | null | undefined",
                    "description": "Set the quantity of fractional.",
                    "privacy": "public",
                    "sourceRange": {
                        "start": {
                            "line": 173,
                            "column": 6
                        },
                        "end": {
                            "line": 176,
                            "column": 7
                        }
                    },
                    "metadata": {
                        "polymer": {
                            "attributeType": "Number"
                        }
                    },
                    "defaultValue": "2"
                }
            ],
            "methods": [
                {
                    "name": "_hasMinusAfterSymbol",
                    "description": "",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 184,
                            "column": 2
                        },
                        "end": {
                            "line": 186,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "localCurrency"
                        }
                    ]
                },
                {
                    "name": "_isNegative",
                    "description": "",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 188,
                            "column": 2
                        },
                        "end": {
                            "line": 190,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "amount"
                        }
                    ]
                },
                {
                    "name": "_isRightAligned",
                    "description": "[function description]",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 197,
                            "column": 2
                        },
                        "end": {
                            "line": 202,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "currencyCode",
                            "type": "String",
                            "description": "[description]"
                        },
                        {
                            "name": "forceAlignRight"
                        }
                    ],
                    "return": {
                        "type": "Boolean",
                        "desc": "[description]"
                    }
                },
                {
                    "name": "_getCurrencyAsSymbol",
                    "description": "(String, String) -> String\nInput String prepared for [ISO 4217 Currency Codes]",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 209,
                            "column": 2
                        },
                        "end": {
                            "line": 215,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "localCurrency"
                        },
                        {
                            "name": "currencyAsLiteral"
                        }
                    ],
                    "return": {
                        "type": "String"
                    }
                },
                {
                    "name": "_getTranslationKeyForCurrency",
                    "description": "Get a translation key for a currency\nInput String prepared for [ISO 4217 Currency Codes]",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 222,
                            "column": 2
                        },
                        "end": {
                            "line": 224,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "currency"
                        }
                    ],
                    "return": {
                        "type": "String"
                    }
                },
                {
                    "name": "_getAbsIntegerPart",
                    "description": "(Number, String) -> String\nReturns the integer part of a number without '-' sign in case it's negative",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 230,
                            "column": 2
                        },
                        "end": {
                            "line": 239,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "number"
                        },
                        {
                            "name": "language"
                        }
                    ]
                },
                {
                    "name": "_startsWith",
                    "description": "Determines whether a string begins with the characters of a specified string.\nthis._startsWith(stringSearching, searchValue, startPosition)",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 245,
                            "column": 2
                        },
                        "end": {
                            "line": 248,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "str"
                        },
                        {
                            "name": "searchedString"
                        },
                        {
                            "name": "position"
                        }
                    ]
                },
                {
                    "name": "_getIntegerPart",
                    "description": "(Number, String) -> String\nReturns the integer part of a number",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 254,
                            "column": 2
                        },
                        "end": {
                            "line": 259,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "number"
                        },
                        {
                            "name": "language"
                        }
                    ]
                },
                {
                    "name": "_getFractionalPart",
                    "description": "Number -> String\nReturns the fractional part of a number (rounded down to 2 digits) or '00' if it's an integer.",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 265,
                            "column": 2
                        },
                        "end": {
                            "line": 277,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "number"
                        }
                    ]
                },
                {
                    "name": "_getSeparator",
                    "description": "",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 279,
                            "column": 2
                        },
                        "end": {
                            "line": 283,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "language"
                        }
                    ]
                },
                {
                    "name": "_getGroupChars",
                    "description": "Get group hundreds according to document language",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 288,
                            "column": 2
                        },
                        "end": {
                            "line": 292,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "language"
                        }
                    ]
                },
                {
                    "name": "__commafy",
                    "description": "(String, String) -> String\nReturns a long integer separated by hundreds\nwith separator according to language",
                    "privacy": "private",
                    "sourceRange": {
                        "start": {
                            "line": 299,
                            "column": 2
                        },
                        "end": {
                            "line": 303,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "numberStr"
                        },
                        {
                            "name": "language"
                        }
                    ]
                },
                {
                    "name": "getFormattedAmount",
                    "description": "Get custom formatted amount",
                    "privacy": "public",
                    "sourceRange": {
                        "start": {
                            "line": 308,
                            "column": 2
                        },
                        "end": {
                            "line": 319,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "amount"
                        },
                        {
                            "name": "currency"
                        },
                        {
                            "name": "localCurrency"
                        },
                        {
                            "name": "locale"
                        },
                        {
                            "name": "decimal"
                        },
                        {
                            "name": "separator"
                        },
                        {
                            "name": "symbol"
                        },
                        {
                            "name": "emptyString",
                            "defaultValue": "''"
                        }
                    ]
                },
                {
                    "name": "_hasDecimalPart",
                    "description": "",
                    "privacy": "protected",
                    "sourceRange": {
                        "start": {
                            "line": 321,
                            "column": 2
                        },
                        "end": {
                            "line": 323,
                            "column": 3
                        }
                    },
                    "metadata": {},
                    "params": [
                        {
                            "name": "currency"
                        }
                    ]
                }
            ],
            "staticMethods": [],
            "demos": [
                {
                    "url": "demo/index.html",
                    "description": ""
                }
            ],
            "metadata": {},
            "sourceRange": {
                "start": {
                    "line": 166,
                    "column": 0
                },
                "end": {
                    "line": 324,
                    "column": 1
                }
            },
            "privacy": "public",
            "name": "CellsBehaviors.AmountBehavior",
            "attributes": [
                {
                    "name": "quantity-fractional",
                    "description": "Set the quantity of fractional.",
                    "sourceRange": {
                        "start": {
                            "line": 173,
                            "column": 6
                        },
                        "end": {
                            "line": 176,
                            "column": 7
                        }
                    },
                    "metadata": {},
                    "type": "number | null | undefined"
                }
            ],
            "events": [],
            "styling": {
                "cssVariables": [],
                "selectors": []
            },
            "slots": []
        }
    ]
}